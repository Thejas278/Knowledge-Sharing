Spring boot 3 is compatibel with Java 17 (LTS) and above and spring version is 6.0+ and even spring security got upgraded to 6

	java EE packages got migrated to Jakarta EE APIS 
		import jakarta.persistence.Entity;
		httpservletRequest httpservletResponse have been moved to jakarta

ProblemDetail- For HTTPerrors we dont have to create a seperate Error class.
Spring 6 has introduced HTTPExchange ie define declarative HTTP services using Java interfaces.The approach is inspired by popular HTTP client libraries like Feign and is similar to how we define repositories in Spring Data.

Spring Native- A native image is a technology to build Java code to a standalone executable.
the JVM uses a JIT compiler to convert bytecode into machine code when the application runs.
Ahead-of-Time (AOT) compilation is a technique that pre-compiles bytecode into native machine code before the application runs
Graal VM
	The General Recursive Applicative and Algorithmic Language Virtual Machine (Graal VM) is a high-performance JDK distribution 		written for Java and other JVM languages.
	It provides a Native Image builder –  a tool to build native code from Java applications and package it together with the VM into 	a standalone executable
	Native images provide various advantages, like an instant startup and reduced memory consumption.

Observability
	We can publish our metircs into 3rd party tools like Prmetheus ,zipkin etc by adding the actuator dependency.
	we have to autowire observationRegistry
	and return Observation.createNotStarted("metricsName",registry)
				.observer(()->customer);  //observer(supplier) here we can pass the return from our controller.

HTTPExchange- Declarative Rest Client
	

**Microservices

	They are independent spring boot applications which run to achive a task

	Using RestTemplate we can make a api call to another spring boot in order to achieve micro services.
	In futhure RestTemplate will be depricated and we have to use webclient which is from Reactive web.

	RestTemplate is thread safe
	RestTemplate restTemplate = new RestTemplate();
	Movie movie=restTemplate.getForObject("http://localhost:8081/movies"+movieId,Movies.class);

	WebClient.Builder builder=WebClient.builder();
	Movie movie=builder.build().get().uri("http://localhost:8081/movies"+movieId).retrieve().bodyToMono(Movie.class).block();

	bodyToMono is like a promise , You will not get it now but u have to wait. It is a Reactive web concept.

	we use block() because we are blocking the execution until the value is received.

	For post request use post() 

	** To change the port number if tomcat in  spring boot 
	go to application.properties of ser/resource folder and type server.port=8081

System Design

Vertical Scaling- Buying Big Machine or increasing the power of exisiting machine
Horizontal Scaling- Buying more machines 


vertical Scaling                                              Horizontal Scaling

Load Balancer Not required                               Load Balancer required to redirect the request to different machine

Single Point of failuer					RESILIENT- If one instance failes we can send it to other instance

Vertical scaling uses a single machine to which Data is consistent, in horizontal scaling because separate machines process different requests, which might cause their data to become out of sync.
all queries are forwarded,
eliminating the possibility of data inconsistency.

Scales Well as users increase							
Hardware Limit

The latest edition of AWS Ops Automator enables vertical scaling of Amazon EC2 instances, allowing automatic management of resources. It automatically adjusts capacity in order to ensure consistent, predictable performance at the lowest possible cost. It can resize the instances by restarting the existing instance with a new size. Alternatively, it can resize an instance by replacing the old instance with a new, resized instance.

 MongoDB, and Google Clous Scanner are good examples of horizontal scaling.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Spring boot
In spring mvc we have to configurations like class path scan,dispatcher servlet,web jars etc

eg if some one is using spring-mvc jar then they would need dispacteher servlet dependency or 
how about autoconfiguring a data source if hibernate is in the class path

Auto configuration in spring means depending on the jar files present in the classpath and the exisiting confuration spring-boot will provide its own default configuration
We have spring initilizar is used to create ready to run projects provided by spring- start.spring.io 
GroupId is the reverse domain name
Artifact Id is the project name

All the spring auto configure will be present in sprint-boot-autoconfigure.jar/META-INF/spring.factories

Inside this file there wil be some anotations like

@Conditional.class {{DataSource.class}} -If will autoconfigure only if there is datasource.class in the class path

@ConditionaOnMissingBean- It will autoconfigure of there is no other  bean matching this name


SpringApplication.run(PecokApplication.class, args);

is a static method , when we run this method, it will
1.set up default configuration
2.starts spring application context
3.performs classpath scan
4.starts tomcat server


Micro-service Design Pattern
	https://miro.medium.com/max/567/1*CKSVv4WkS8Okx572rX45HA.png

	Decomposition Patterns		Integration Patterns			DataBase	Observability Pattern	Cross Cutting Concern 
																Patterns								pattern

	Decompose By Busciness		API Gateway Patterns		Database perservice							Service Discovery Pattern
															pattern


								Aggregator pattern-			Shared Database pattern

															CQRS

															SAGa

	capability-					Chained microservice pattern

								Client side ui compostion 
								pattern
	Decompose By subdomain

	Strangler Pattern




Decomposition Patterns

	Decompose By Business capability
		Break the monolithic application based on the busciness capability
		A business capability is what a business does to generate value (for example, sales, customer service, or marketing)
	
		eg: Insurance company might have 
	
			Sales		Customer		Marketing as the seperate 
	
	Decompose By subdomain
		This pattern uses a domain-driven design (DDD) subdomain to decompose monoliths. This approach breaks down the organization’s domain model into separate subdomains that are labeled as core (a key differentiator for the business), supporting (possibly related to business but not a differentiator), or generic (not business-specific)
	
							
								 eg: Insurance company might have 
	
							Sales						Customer		Marketing as the seperate 
	
							Purchasing subdomains						Campaingns subdomain
	
	
							Claims subdomains							Reports
	
	Strangler Pattern
		In this dsesign pattern we migrate the monolithic application part by part ie 
		for the Insurance monolith , we move Customer service to a new micro service but other service will be in the monolith and there will be a api gateway which will redirect the customer service calls to the new micro service and other calls to the old monolith application


Integration pattern

	API Gateway pattern- 
			Client will interact with the API gateway rather than directly interacting with the service, We can add authentication and authorisation in single place. Rate limiting can also be done. Even the 	api's can be monitotred

			We can create our own gateway using spring cloud

			Client side ui compostion pattern- Single ui page will have multiple microservices running in the background

	Aggregator pattern
		Basically, The Service aggregator design pattern is receives a request from the client or API Gateways, and than dispatches requests of multiple internal backend microservices, and than combines the 	results and responds back to the initiating request in 1 response structure
	
		Service service will give the price and comission will give the comission, we will combime them and then give the final price to the user or even api gateway can also become the aggrigator
	
	Chained Microservice Design Pattern: 
		Chained microservice design pattern produce a single consolidated response to the request. In this case, the request from the client is received by Service A, which is then communicating with Service B, 	which in turn may be communicating with Service C. All the services are likely using a synchronous HTTP request/response messaging

DataBase Pattern

	Database per service pattern

			Using a database per service has the following benefits:

					Helps ensure that the services are loosely coupled. Changes to one service’s database does not impact any other services.

					Each service can use the type of database that is best suited to its needs. For example, a service that does text searches could use ElasticSearch. A service that manipulates a social graph could use Neo4j.

			Using a database per service has the following drawbacks:

			Implementing business transactions that span multiple services is not straightforward. Distributed transactions are best avoided because of the CAP theorem. Moreover, many modern (NoSQL) databases don’t support them.

					Implementing queries that join data that is now in multiple databases is challenging.

					Complexity of managing multiple SQL and NoSQL databases

			There are various patterns/solutions for implementing transactions and queries that span services:

					Implementing transactions that span services - use the Saga pattern.

					Implementing queries that span services:

API Composition
		- the application performs the join rather than the database. For example, a service (or the API gateway) could retrieve a customer and their orders by first retrieving the customer from the customer service and then querying the order service to return the customer’s most recent orders.

Command Query Responsibility Segregation (CQRS) - 
			Imagine we have a flipkart application where during some sale offer there will be huge load on the application 	but number of read operations will be more than the right operation so if both read and write operations are on the same machine then it might impact the perfromance
			so we are segregating the read and write operations into different services and each service will have its own 	database
			Whenever there is a command request ie to add to update the record we send a event to query service so that any change in this db will be reflected in the query db as well we can use kafka for event streaming

Saga Pattern
			It is used for distributed transaction when multiple services have seperate db and each have to update n their 	own db and if any one transaction fails then all the other transactions will also roll back

			This can be achieved using

			1.Orchestrator- There will be a orchestator which will send and receive the events for each service and depending on this response each service will either roll back or complete the transaction

			2.Coreography- There will not be a centralised orchestrator, each service will talk to each other and revert or complete the transaction

Cross Cutting Concern 
	
	Service Discovery- In this patterns there will be a discovery server which will find which service needs to be called

			2 types 

					1.Client side service discovery

							Client does the service discovery, he makes the call to discovery server to get the service path and then makes a second call to the actual service
							Here the client will make 2 calls
							Eureka is a example for this.

					2.Server Side service discovery

						Server will make the discovery and redirect the user to the right server.Client only make one call
						example NGINX,AWs
						
						When making a request to a service, the client makes a request via a router (a.k.a load balancer) that runs at a well known location. The router queries a service registry, which might be built into the router, and forwards the request to an available service instance.



-----------------------------------------------------------------------------------------------------------------------------
RestTemplate
	Synchronous client to perform HTTP requests

WebClient
	As of Spring Framework 5, alongside the WebFlux stack, Spring introduced a new HTTP client called WebClient.

	WebClient is a modern, alternative HTTP client to RestTemplate. Not only does it provide a traditional synchronous API, but it also supports an efficient nonblocking and asynchronous approach.

	That said, if we’re developing new applications or migrating an old one, it’s a good idea to use WebClient. Moving forward, RestTemplate will be deprecated in future versions.

	RestTemplate will continue to exist (at least for now). You don't have to replace it with WebClient.
	One of the main differences is RestTemplate is synchronous and blocking i.e. when you do a rest call you need to wait till the response comes back to proceed further.

	But WebClient is complete opposite of this. The caller need not wait till response comes back. Instead he will be notified when there is a response.

	If you need such a functionality, then yes you need to replace your Resttemplate with WebClient.
	You can in fact achieve Rest template like synchronous processing in webclient using .block(). But the other way is not possible.

	EDIT:

	RestTemplate is marked as feature complete in future version(> 5.0) and will not have new features added going forward


Feign Client 
			Declarative webservice client

			Feign allows you to abstract the mechanics of calling a REST service. Once you configure and annotate the Feign interface, you can call a REST service by making a simple Java function call. The actual implementation of making a REST call is handled at runtime by Feign. This means that the implementation can be configured without changing your business logic code.

			By just changing the Feign configuration in Java or using properties you can add encoding/decoding, logging, and change the REST call implementation library. All this is done through configuration only, while the business logic that calls the service remains unchanged.

			Since Feign uses standard Java interfaces, it's also easy to mock them during unit tests.

Feign Client vs RestTemplate
			One of the advantages of using Feign over RestTemplate is that, we do not need to write any implementation to call the other services. So there is no need to write any unit test as there is no code to test in the first place. However, it is advised that we write Integration tests.

@HttpExchange
	Declarative Rest Client.
	You define an interface and annotate it with @HttpExchange and related annotations, similar to how you define REST controllers 		with @RequestMapping.
	We have to inject our Exhange interface to the webclient.

Feign vs HttpExhange

	HttpExhange-Fully integrated into the Spring ecosystem, no external dependencies. 
	Requires adding the Spring Cloud OpenFeign dependency to your project. 

	You're using Spring Framework 6 or higher use Exchange.
	You're building microservices and using Spring Cloud use Feign.
	You want to take advantage of the features of Spring Cloud OpenFeign, such as service discovery and resilience. 

HTTP Status Codes

	Informational responses (100 – 199)

	Successful responses (200 – 299)

		200 OK
			The request succeeded. The result meaning of "success" depends on the HTTP method:

		201 Created
			The request succeeded, and a new resource was created as a result. This is typically the response sent after POST requests, or some PUT requests.


	Redirection messages (300 – 399)
	Client error responses (400 – 499)

		400 Bad Request
			The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
			Server error responses (500 – 599)

		401 Unauthorized
		Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.

		403 Forbidden
		The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.

	Server error responses (500 – 599)

		500 Internal Server Error
		The server has encountered a situation it does not know how to handle.

		501 Not Implemented
		The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.

		502 Bad Gateway
		This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.

		503 Service Unavailable
		The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.

Circuit Breaker spring boot 3
		Imagine you have a orderservice which makes a call to paymentservice. OrderService has a servlet Threadpool from which 			each thread makes a request to payment service and once it gets the response, the thread becomes free.

	here there can be 2 types of failures
			1.Immediate Failure where immediately we will get exception.We can deal easlily in this situation and the thread 			becomes free immediately but if the service is down then, if we make 10 repeated calls to the payment service, 				the request will always fail so there is no point doing 11th call.

			2.TimeOut Failure- Here there is no immediate failure so Imagine if there are 10 threads in Orderservice , 			because of somme issue will Paymentservice all the threads of Orderservice will be stuck and Orderservice will not be 			able to process any other request from other service also,ie failure in PaymentService has caused Failure in OrderService 		this might have a cascading effect as well ie if Paymentservice is used by other service say 						EmployeeService,StorageService both will be stuck similar to Orderservice because of Paymentservice 

		To avoid the above problem we should stop sending request to the failed service and give it time to recover from 			overloading and also for every request we should send a default response. 

		This can be achieved by adding a interceptor between the service so that if the service is giving proper response then we 		allow further requests but if request are failing then we set the status of interceptor as stop so that it will stop 			accepting new requests. 

		If 1 request fails then we should not stop because sometimes this might not be a actual issue so we have to set a 			threashold and 	if the failures crosses the threshold then we should fail.
		like out of 100 calls if 30 percent calls are failing then we stop accepting new requests.
		Depending on the recovery time of a service we can set a timer so that after certain time it can again start accepting 			the requests. Even after the recovery time we might not be sure if the service has actually come up so we can set accept 		partial status so that only few request goes to the service and for most of the requests we still send the default 			response.
		3 status
		closed- can call microservice
		Open- no calls 
		Half-open- partial allow

	Using Circuit breakers we can
	1.Limit the calls to a service
	2.WE can have a fallback method incase of failures

	To use resilliance4j we need to add spring aop and resilliance4j dependency
	@CircuitBreaker annotation of the method where u want to implement this 
	@CircuitBreaker(name="EmployeeCB", fallBackMethod="GetMessage()")

	we have to implement a fallback method
	public String getMessage(Throwable th){
			}
	referer this doc for all the options u can configure in yml file https://resilience4j.readme.io/docs/circuitbreaker
	watch this vide for more info https://www.youtube.com/watch?v=ADHcBxEXvFA

	Hystrix implements Circuit Breaker pattern but it is in maitainance mode so we should use resilliance4j

ZipKin and Sleuth
	It is used for distributed log tracing to find out for which instance of which microservice failed.

	Sleuth generates trace information while Zipkin visualizes it , If we add Zipkin Sleuth then for each request spring cloud sleuth will generte a metadata
	which will have servicename--TraceId---spanId--Export Flag

		servicename will be micrservice instance name
		TraceId will be common for each request
		spanId will be specific to each microservice

		You can run zipkin server as a docker image or you can download the zipkin jar and execute it

	MicroMeter

	Spring Cloud Sleuth’s last minor version is 3.1. You can check the 3.1.x branch for the latest commits.

	The core of this project got moved to Micrometer Tracing project and the instrumentations will be moved to Micrometer and all respective projects (no longer all instrumentations will be done in a single repository.

	Prometheus

	It is a open source monitoring system.
	It is designed to collection time series data from various sources such as server,applications and stores data in a time series database, which allows user to query and visualise data in various ways

API Gateway

	It is a abstraction layer for you Microservices so that the ui guy does not need to worry or change his code when you refactor or change something in your backend.
	Api gateway will expose the api's which are needed for the front end or client.

	It is sometimes referred as Edge Microservice.

	Since api gateway act as single point of entry to our application ,We can also add Loadbalancing,caching,authentication,monitoring and other features as well.

	Zuul is a ApiGateway provided by netflix

 Deploy Spring Boot to ECS Using CodeBuild & CodePipeline
	Once you create a spring boot application you need to create a docker image  and publish it to Elastic Container Registry and 		from there Elastic ContainerService will pull the image.
	We can use AWS code build for Continous integration and deploying so that docker image and publishing to the Registry can be 		automated

Distributed Transaction
	In a distributed system like database per service it is difficlut to guarentee ACID .

	2 phase commit

	Here there will be a co-ordinator who will send  prepare phase message , if all the services are okay to commit then the co-		ordinator will send a commit message they then permanently apply the change. 
	We can use Zookeeper by apache
	Drawbacks
	Latency is high and reduce performance
	dependenct of co-ordinator decision before prodeecing so till then the service have to wait.
	Single point of failure for co-ordinator

	Saga Patterns
	
	Choreography
	Service communicates through events from other service.
	Service can be independent as more services increase it can get complicated.
	There will not be any http calls we wil use events

	Orchestration
	There will be a central orchestrator who will send what actions needs to taken by each service.
	Here all the services needs to communicate with the orchestrator.
	Easier to Debug but can be single point of failure

The Bootstrap Application Context
A Spring Cloud application operates by creating a "bootstrap" context, which is a parent context for the main application. Out of the box it is responsible for loading configuration properties from the external sources, and also decrypting properties in the local external configuration files. The two contexts share an Environment which is the source of external properties for any Spring application. Bootstrap properties are added with high precedence, so they cannot be overridden by local configuration, by default.

for more info 
https://cloud.spring.io/spring-cloud-static/spring-cloud.html#:~:text=A%20Spring%20Cloud%20application%20operates,the%20local%20external%20configuration%20files.


Java 9 + version needs jaxb-api because of modularity it got removed in java9
