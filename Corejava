Important topics and Explanation


UML diagram more info https://www.youtube.com/watch?v=6XrL5jXmTwM

Java is platform independent but jdk,jre,jvm are all platform dependent.

JDK- Java developemt kit 
it is use to develop and run java application, JDK is platform dependent

JDK=JRE+developement tools

JRE- Java Runtime Envrionment 
is used in the client machine just to run- 

JRE=JVM+library classes

JVM is a virtul machine which is a interpretor and it is responsible for line by line execution.JVM converts the byte code into machine level language
 JVM is also platform dependent and provides core java functions like memory management, garbage collection, security etc.
 WE need to have different jvm for different operating system.

*Garbage Collection

 Garbage collector is best example of Daemon thread as it is always running in background.
 Finalization:Just before destroying an object, Garbage Collector calls finalize() method on the object to perform cleanup activities.
    Once finalize() method completes, Garbage Collector destroys that object.

Memory leak
	One of the core benefits of Java is the automated memory management with the help of the built-in Garbage Collector (or GC for short). The GC implicitly takes care of allocating and freeing up memory, and thus 	is capable of handling the majority of memory leak issues

	A Memory Leak is a situation where there are objects present in the heap that are no longer used, but the garbage collector is unable to remove them from memory
	unreferenced objects are removed by the garbage collector but the referenced ones are not removed

	Static Variables can cause memory leak
		Static variables cannot be elected for garbage collection while the class is loaded.
		 They can be collected  either by setting them to null if we dont need them or when the respective class loader (that was responsible for loading this class) is itself collected for garbage.

		A class or interface may be unloaded if and only if its defining class loader may be reclaimed by the garbage collector [...] Classes and interfaces loaded by the bootstrap loader may not be unloaded.

	Database connections,input streams, and session objects if not closed with finaly blocks can cause memory leak
		When using Java 7+, we can make use of the try-with-resources block

	Improper equals() and hashCode() Implementations
		When defining new classes, a very common oversight is not writing proper overridden methods for the equals() and hashCode() methods.

		HashSet and HashMap use these methods in many operations, and if they’re not overridden correctly, they can become a source for potential memory leak problems because if you want to insert many person objects to a map as key then it will use the equals and hashcode methods of the person class, so we need to implement it properly or else we will have many objects for example
		  map.put(new Person("jon"), 1);  
		  map.put(new Person("jon"), 1); both are different if the equals and hascode are not implemented properly.

	ThreadLocal
			Memory Leaks with ThreadLocals

		ThreadLocals are supposed to be garbage collected once the holding thread is no longer alive. But the problem arises when we use ThreadLocals along with modern application servers.
		
		Modern application servers use a pool of threads to process requests, instead of creating new ones (for example, the Executor in the case of Apache Tomcat). Moreover, they also use a separate classloader.
		
		Since Thread Pools in application servers work on the concept of thread reuse, they’re never garbage collected; instead, they’re reused to serve another request.
		
		If any class creates a ThreadLocal variable, but doesn’t explicitly remove it, then a copy of that object will remain with the worker Thread even after the web application is stopped, thus preventing the 		object from being garbage collected.
		
		How to Prevent It?
		
		It’s good practice to clean-up ThreadLocals when we’re no longer using them. ThreadLocals provide the remove() method, which removes the current thread’s value for this variable.
		Don’t use ThreadLocal.set(null) to clear the value. It doesn’t actually clear the value, but will instead look up the Map associated with the current thread and set the key-value pair as the current 			thread and null, respectively.
		It’s best to consider ThreadLocal a resource that we need to close in a finally block, even in the case of an exception::
		 
		
		try {
		    threadLocal.set(System.nanoTime());
		    //... further processing
		}
		finally {
		    threadLocal.remove();
		}

 Members of the class-fields,methods and inner classes

 variables decalred using final keyword can only be initialized in a constructor.
 static final variables can be  initialized inside only inside a static block.

 final methods are inherited but are not overridden

 final keyword cannot be used to constructor because constructors are not inherited.

 We cannot create a final interface(eg String class)
 we cannot use abstract and static keywords together(y.... think monkey ??..think!!)

 A final class cannot be extended, we should use the final class if we do not want inheritance,
 If we want to promote composition over inheritance.

 1-No, declaring the constructor as final is not possible.We will get complitation error saying  final modifier not allowed.
 Final means you cannot override it. Since Constructor declarations are not members. They are never inherited and therefore are not subject to hiding or overriding. A parent class constructor can be invoked.

 *If we use string1+strng2+....

 then java compiler will complie the code by replacing + with StringBuilder.append
 but if there is only 2 string concatination , then complier will keep it as it is
 
 StringBuffer is thread safe and StringBuilder is not thread safe
 StringBuffer is slower when compared to StringBuilder.

 Stack is used to method execution, Heap is used for storing objects

Object class is the only class that does not extend any other class,every class is implicitly a subclass of Object.

Static members,private,constructors cannot be over rided and access specifiers can be changed but cannot be reduced.
Visibility in the child can be more than Parent class but cannot be less than the parent class.

String Interning
	Thanks to the immutability of Strings in Java, the JVM can optimize the amount of memory allocated for them by storing only one copy of each literal String in the pool. This process is called interning

Before Java 7, the JVM placed the Java String Pool in the Permanent Generation (PermGen space), which has a fixed size — it can’t be expanded at runtime .
	The risk of interning Strings in the PermGen (instead of the Heap) is that we can get an OutOfMemory error from the JVM if we intern too many Strings.
	From Java 7 onwards, the Java String Pool is stored in the Heap space, which is garbage collected by the JVM. The advantage of this approach is the reduced risk of OutOfMemory error because unreferenced Strings will be removed from the pool, thereby releasing memory.

String s1="thejas"
String s2="thejas"// String pool does not allow duplicated objects so only one object gets created and so s1==s2

but String s3=new String("thejas")// Object is created in heap so s1!=s3

		** 			private		     			default     			protected	public
		Class			No					Yes				No		Yes
		Nested Class		Yes					Yes				Yes		Yes
		Constructor		Yes					Yes				Yes		Yes
		Method			Yes					Yes				Yes		Yes
		Field			Yes					Yes				Yes		Yes

		A class can only be default,public and  Inner class can be private,default,protected,public

		Default is also called as package private
		Protected =Can be acessed by subclass or package private

For overloading the return type does not matter only methodname and argument list matter

Constructor is a block with no return type, It has same name as the class, It is not a member of a class so its not inherited,It can only be invoked.

A subclass inherits all of the public and protected members of its parent, if the subclass is present in the same packge , then it can access the package private or default members also.

A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.

static methods are inherited but not overridden, if you try to override then the static method in the parent class will be hidden
 variables declared using static final needs to be initialized
 
 Serializable is a marker interface

Casting of Objects
	MountainBike is descended from Bicycle and Object. Therefore, a MountainBike is a Bicycle and is also an Object, and it can be used wherever Bicycle or Object objects are called for.

	The reverse is not necessarily true: a Bicycle may be a MountainBike, but it isn't necessarily. Similarly, an Object may be a Bicycle or a MountainBike, but it isn't necessarily.

	Casting shows the use of an object of one type in place of another type, among the objects permitted by inheritance and implementations. For example, if we write

	Object obj = new MountainBike();
	then obj is both an Object and a MountainBike (until such time as obj is assigned another object that is not a MountainBike). This is called implicit casting.

	If, on the other hand, we write

	MountainBike myBike = obj;
	we would get a compile-time error because obj is not known to the compiler to be a MountainBike. However, we can tell the compiler that we promise to assign a MountainBike to obj by explicit casting:

	MountainBike myBike = (MountainBike)obj;
	This cast inserts a runtime check that obj is assigned a MountainBike so that the compiler can safely assume that obj is a MountainBike. If obj is not a MountainBike at runtime, an exception will be thrown.

	we can user instanceOf method to avoid the run time error
		eg
			if (obj instanceof MountainBike) {
    		MountainBike myBike = (MountainBike)obj;
		}

Custom Annotations

Need for creating custom annotations

1.For documentation purpose- Annotations will not have any functionality in this case

2.Input for a java code processor

3.Input for java library that access our annotation at runtime via java reflection

Annotations can be used in class,method,constructors,fields , parameters(See @Target(ElementType.Type) options)

		@Retention(RetentionPolicy.RUNTIME)

			RetentionPolicy.Source-It will only be present in the source code
			RetentionPolicy.Class- It will be present both in source code and class file(Compiled file)
			RetentionPolicy.Runtime- It will be availabe in runtime as well

		@Target(ElementType.Type)
		@Inherited can be used in a annotation to indicate it can be inherited
		@Documented will document the annotation in java doc

1.Annotations without any fields are called as Marker Annotations
2. If the annotation has one field then it is called Single value annotaion
#There is a  interface called Annotation, all the annotations created are subclass of this Interface

**Creating custom Annotation
1.WE need to use @interface annotation 


eg 1
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.Type)
	public @interface JsonSerializable {
	}

	Above example is a marker interface which does not have any methods,has runtime visibility, and we can apply it to types (classes)

eg @interface smartPhone{
	
	String os();
	int version();
}

we can now use @smartPhone(os="symbian",version="1") as annotation

	Using ReflectionApi we can get the value or features of the object

	eg
		 if(new GreenApple().getClass().isAnnotationPresent(Barcode.class)){
            System.out.println(new GreenApple().getClass().getAnnotation(Barcode.class));
        }

        for the above code to work the retentionpolicy should be runtime

        @Target(ElementType.TYPE)*/
		@Inherited
		@Documented
		@Retention(RetentionPolicy.RUNTIME)
		public @interface Barcode {

	    public String type() default "Main Type";

	    public int price() default 100;

		}


Cohesion refers to the level of a component which performs a single well-defined task.

In java we have call by value there is no call by reference in java because we do not have pointers
In java whatever changes we make it will be only applicable inside the method

Call by value means calling the function with parameter as value

call by reference means calling the function with paramater as reference

Association
	It is a relation between 2 independent classes establised through their objects

Composition(has a) and Aggregation(part of) are the 2 forms of Association.

	Consider a simple example of a LinkedList class. A LinkedList is made up of Nodes. Here LinkedList class is the owning object. 		When it is destroyed, all the Nodes contained in it are wiped off. If a Node object is deleted from the list, the LinkedList 		object will still exist.

	Composition is implemented such that an object contains another object.

				class LinkedList {
				
				 Node head;
				 int size; 
				}
				This is composition

Aggregation is a has a relationship(Inheritance - method overriding)

	Aggregation is also a type of Object Composition but not as strong as Composition. It defines "HAS A" relationship. Put 		in very simple words if Class A has a reference of Class B and removing B doesn't affect the existence of A then it is 				aggregation. You must have used it at some point.

		It is a unidirectional association eg department has students but vicecersa is not possible

		In Aggregation, both the entries can survive individually which means ending one entity will not effect the other entity

Composition is a restricted form of Association in which two entities are highly dependent on each other.
				It represent parts of relationship, when one is destroyed the dependent object is also destroyed

	Composition is a strong Association whereas Aggregation is a weak Association.

Inheritance

	Inheritance will make the sub classes unique by putting the commmon implementations in the super class.

	A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.

Object class in the super most class in java

	The Object class is the top of the class hierarchy. All classes are descendants from this class and inherit methods from it. Useful methods inherited from Object include toString(), equals(), clone(), and getClass().

Interface
	In the Java programming language, an interface is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types

	Interface can be public or default(Package Private)

	All methods are by default public
	All the constants are by default public static final so you dont have to use these modifiers.

	For Non static methods if the child method has the same name , then it will be overrided in the child class(This happens at runtime).
	For static methods,static fields,non static fields the parent method will be hidden not over ridden(this happens at compile time)

	Foo f = new Bar();
        f.instanceMethod();//child method gets executed
        f.classMethod();//parent method gets executed

        If u create a abstract method (Y) in the parent and if u declare the same method(Y) as abstratc in ur child interface then the class which will implement the child will have to implement the abstract method (Y) , the parents default implementation will not be available to it

        Default methods can be overridden

        https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html
 
 * Comparable - compareTo(Object o)

	        If any custom class wants to use Arrays.sort or Collections.sort then it should implement Comparable.

	        In Comparable we modify the pojo class,Sometimes we might not be able to modify the class.
		Since we have to modify the actual class we can implement only 1 type of sorting.
	        NullPointerException - if the specified object is null
		ClassCastException - if the specified object's type prevents it from being compared to this object.

 * Comparator- compare(Object o1,Object o2)

         It is a good practise to Seralize the comparator as they may be used as ordering methods in serializable data structures (like 	TreeSet, TreeMap). In order for the data structure to serialize successfully

         Arrays.sort or Collections.sort will take one more argument which take Comparator as argument.

         NullPointerException - if the specified object is null
	ClassCastException - if the specified object's type prevents it from being compared to this object.

			First object with Second object will be ascending
			reverse will be descending

		if you return 1 then it will be swapped
		ie if(e1.employeeAge>e2.employeeAge)
			return 1;
		else
			return -1;
 **Comparator vs comparable
	Comparator has compare method
	comparable has compareTo method

	Comparator is used to compare more than one field
	comparable is used to compare one field
	Implemented in the seperate class ,Comparator- Actual class is not effectedate class
	comparable- Actual class is effected

	Comparable should be used when you compare instances of the same class.
	Comparator can be used to compare instances of different classes

	Comparable is used to default sorting,Comparator is used for custom sorting

	Useful methods of Comparator

	Comparator<Chair> cmp=Comparator.comparing(Chair :: getName);
		Collections.sort(cl,  cmp);


		Comparator ch4=	Comparator.comparing(Chair::getName).thenComparing(Chair::getSize);
		Collections.sort( cl,ch4);

		Comparator ch4=	Comparator.comparing(Chair::getName).reversed();
		Collections.sort( cl,ch4);

Design Patterns

1) Creational Pattern
	Factory Method Pattern
	Abstract Factory Pattern
	Singleton Pattern
	Prototype Pattern
	Builder Pattern
	Object Pool Pattern

2) Structural Pattern
	Adapter Pattern
	Bridge Pattern
	Composite Pattern
	Decorator Pattern
	Facade Pattern
	Flyweight Pattern
	proxy Pattern

3) Behavioral Pattern
	Chain of Responsibility
	Command Pattern
	Interpreter Pattern
	Iterator Pattern
	Mediator Pattern
	Memento Pattern
	Observer Pattern
	State Pattern
	Strategy Pattern
	Template Pattern

1.Factory Method Pattern

	Imagine you have a interface(Account) and you have many implementations of that interface(Savings,Salary..etc) instead of exposing the code of object creation to the client, we are creating a factory class which is responsible for creating the object.If we need to add any new type of account then we dont have to change the client code, we have to change the factory class.

	The factory method pattern loosens the coupling code by separating our Product‘s construction code from the code that uses this Product

	The Factory Method Pattern is also known as Virtual Constructor.
	It promotes polymorphism you can create diffferent objects in runtime

			class GetPlanFactory{  
			      
			   //use getPlan method to get object of type Plan   
			       public Plan getPlan(String planType){  
			            if(planType == null){  
			             return null;  
			            }  
			          if(planType.equalsIgnoreCase("DOMESTICPLAN")) {  
			                 return new DomesticPlan();  
			               }   
			           else if(planType.equalsIgnoreCase("COMMERCIALPLAN")){  
			                return new CommercialPlan();  
			            }   
			          else if(planType.equalsIgnoreCase("INSTITUTIONALPLAN")) {  
			                return new InstitutionalPlan();  
			          }  
			      return null;  
			   }  



2.Abstract Factory Pattern
		Define an interface or abstract class for creating families of related (or dependent) objects but without specifying their concrete sub-classes.
Imagine you have to make a meal combo

		interface ComboFactory {
				    Food createFood();
				    Drink createDrinks();
				}
		benefits- Ensures Consistency,Loose coupling ie adding new impls will not effect the client

3.ProtoType Design Pattern

	cloning of an existing object instead of creating new one and can also be customized as per the requirement.

		EmployeeRecord e1=new EmployeeRecord(eid,ename,edesignation,esalary,eaddress);  
          
        e1.showRecord();  
        System.out.println("\n");  
        EmployeeRecord e2=(EmployeeRecord) e1.getClone();  //IN get clone we are creating a object,this will be shallow cloning
        e2.showRecord();  

	Or
	You can create a interface and add a clone method and make classes implement the interface

			public abstract class Tree {
    
				    // ...
				    public abstract Tree copy();
				    
				}
and implement and test
		public class TreePrototypesUnitTest {
			public void givenAPlasticTreePrototypeWhenClonedThenCreateA_Clone() {
		        // ...
		
		        PlasticTree plasticTree = new PlasticTree(mass, height);
		        plasticTree.setPosition(position);
		        PlasticTree anotherPlasticTree = (PlasticTree) plasticTree.copy();
		        anotherPlasticTree.setPosition(otherPosition);
		
		        assertEquals(position, plasticTree.getPosition());
		        assertEquals(otherPosition, anotherPlasticTree.getPosition());
		    }
		}
4.Builder Design Pattern
	separates the construction of complex objects from their representation, offering a cleaner and more flexible approach to object creation.
	construct a complex object from simple objects using step-by-step approach.

		public class Post {
		
		    private final String title;
		
		    private final String text;
		
		      Post(Builder builder) {
		        this.title = builder.title;
		        this.text = builder.text;
		           }
		
		      public static class Builder {
		        private String title;
		        private String text;
		     
		        public Builder title(String title) {
		            this.title = title;
		            return this;
		        }
		
		        public Builder text(String text) {
		            this.text = text;
		            return this;
		        }
		
		             public Post build() {
		            return new Post(this);
		        }
		    }
		}

	and use it like
		Post post = new Post.Builder()
		  .title("Java Builder Pattern")
		  .text("Explaining how to implement the Builder Pattern in Java")
		  .category("Programming")
		  .build();

	Even Lombook has a builder annotation @Builder.

----------------------------------------------------------------------------------------------------------------------------------

Structural DesignPattern

5.Adopter Design pattern: 
An Adapter pattern acts as a connector between two incompatible interfaces that otherwise cannot be connected directly. The main goal for this pattern is to convert an existing interface into another one the client expects.

	Adapter makes things work after they're designed; Bridge makes them work before they are

	Effectively, the Adapter pattern is useful when you have existing code, be it third party, or in-house, but out of your control, or otherwise not changeable to quite meet the interface you need it to.

	A phone(Interface) needs a Specific Charger(Interface) , if u dont have company charger then Some other Hardware will implemenet Specific Charger and that will act as Adapter which will connect Phone interface and Specific Charger interface. 

6.Brdige Design Pattern
It is a structural Design Pattern where we seperate the abstraction hierarcy and implementation hieracy into 2 different layers so that change in one layer will not effect the other layer.

	The Bridge pattern is something you implement up front - if you know you have two orthogonal hierarchies, it provides a way to decouple the interface and the implementation in such a way that you don't get an insane number of classes. Let's say you have:

	MemoryMappedFile and DirectReadFile types of file objects. Let's say you want to be able to read files from various sources (Maybe Linux vs. Windows implementations, etc.). Bridge helps you avoid winding up with:

	MemoryMappedWindowsFile MemoryMappedLinuxFile DirectReadWindowsFile DirectReadLinuxFile

	Adapter vs Bridge read this https://stackoverflow.com/questions/1425171/difference-between-bridge-pattern-and-adapter-pattern
	https://www.youtube.com/watch?v=F1YQ7YRjttI

7.Facade Design patter is a pattern where the complexities of the system is hidden and the client is provided with the interface to access the system

	Facade hides the complexities of the system and provides an interface to the client from where the client can access the system.

		public class Inventory {
		public String checkInventory(String OrderId) {
		    return "Inventory checked";
		}
		}
		
		public class Payment {
		public String deductPayment(String orderID) {
		    return "Payment deducted successfully";
		}
		}
		
		
		public class OrderFacade {
		private Payment pymt = new Payment();
		private Inventory inventry = new Inventory();
		
		public void placeOrder(String orderId) {
		    String step1 = inventry.checkInventory(orderId);
		    String step2 = pymt.deductPayment(orderId);
		    System.out
		            .println("Following steps completed:" + step1
		                    + " & " + step2);
		   }
		}
		
		public class Client {
		       public static void main(String args[]){
		         OrderFacade orderFacade = new OrderFacade();
		         orderFacade.placeOrder("OR123456");
		         System.out.println("Order processing completed");
		       }
		  }
8.Decorator Design Pattern
		Here we add additonal responsibilities to a exisitng object in runtime by creating multiple decorators .
		Like There is a ChristmasTree interface and ChristmasTreeImple implements it

		now we create another Abstract class TreeDecorator which will implement ChristmasTree and also it will use compostion to 	inject the ChristmasTree within it ie

		public abstract class TreeDecorator implements ChristmasTree {
		    private ChristmasTree tree;
		    
		    // standard constructors
		    @Override
		    public String decorate() {
		        return tree.decorate();
		    }
		}
	Now we can decorate the Christmus tree with different decorations like BubbleLights ,Garlands etc these classes should implement 	TreeDecorator.

9.Flyweight Design Pattern
In this design pattern reusing the already created objects and resuing them and create new object when no match is found.

10.Proxy Design pattern
You need to update
	It provides the protection to the original object from the outside world.

11.Chain of Responsibility
A request can be handled by a chain of objects , The request is not coupled to a single object rather than a chain.
Chain of Responsibility allows an object to send a request to other objects without knowing who is going to handle it.

This pattern is frequently used in the chain of multiple objects, where each object either handles the request or passes it on to the next object in the chain if it is unable to handle that request.
This pattern encourages loose coupling between sender and receiver, providing freedom in handling the request.
eg catchblock

12.Observer Design pattern
	An Observer Pattern says that "just define a one-to-one dependency so that when one object changes state, all its dependents are notified and updated automatically".

13.Command Design pattern

	A Command Pattern says that "encapsulate a request under an object as a command and pass it to invoker object. Invoker object looks for the appropriate object which can handle this command and pass the command to the corresponding object and that object executes the command".

In the command design patterns , we will encapsulate all the data in a object that is required to execute a action(command) including what method to call, the method’s arguments, and the object to which the method belongs.

 Command Design pattern has four components: the Command, the Receiver, the Invoker, and the Client.

	Receiver: A receiver is an object that performs a set of cohesive actions.It’s the component that performs the actual action when 	the command’s execute() method is called.

	An invoker is an object that knows how to execute a given command but doesn’t know how the command has been implemented. It only 	knows the command’s interface.

	A client is an object that controls the command execution process by specifying what commands to execute and at what stages of 		the process to execute them

	For example see this https://www.baeldung.com/java-command-pattern

	Advantage of command pattern
	It separates the object that invokes the operation from the object that actually performs the operation.
	It makes easy to add new commands, because existing classes remain unchanged.

---------------------------------Java Upgrades--------------------------------------------------------------------------------------------

Abstract classes versus interfaces in Java 8

Abstract class can define constructor. They are more structured and can have a state associated with them. While in contrast, default method can be implemented only in the terms of invoking other interface methods, with no reference to a particular implementation's state. Hence, both use for different purposes and choosing between two really depends on the scenario context.

why Interface Default methods?
The default methods were introduced to provide backward comparability so that existing interfaces can use the lambda expressions without implementing the methods in the implementation class. Default methods are also known as defender methods or virtual extension methods.
	 eg ForEach method would not have been default method, every collection implementing class had to implement it. 
		or List.replaceAll have dafault implementations.

Differences between static and default methods in Java 8:

1) Default methods can be overriden in implementing class, while static cannot.

2) Static method belongs only to Interface class, so you can only invoke static method on Interface class, not on class implementing this Interface, see:

**In java 8 
1.we can create methods in interface

	Inside interface you can define a method with a default keyword and for defining static methods we dont have to use default keyword
	eg:

	public interface employee{

	public Employee getEmployee();

	default Employee findEmployee(int employeeId){

	}
	}

	If there are 2 interfaces which have defined a same default method in them then the implementing class should also implement the method.
	this is only applicable if both the interfaces have the same method.

	Class has more power than interface

	**while using default methods we cannot override the methods present in the object class

2.We got lambda functions

	Java lambda expression is treated as a function, so compiler does not create .class file. It is usuall used to implement a functional Interface

	**@FunctionalInterface -any class marked with the above annotation can have only one abstract method and it can have any number of default methods. These are mainly added to support lambda expressions
	java.lang.Runnable is a example for functional Interface

	eg: Adding Functiona Interface

				@FunctionalInterface
				public interface FunctinalLambda {

					 abstract Employee getEmployee(int employeeId);
					
					 default Employee showEmployee(int employeeId){
						return  new Employee(10, "mmmm");
					 }
				}

This is the implementation, We don't have to create a new class for the implementation instead we can

							public class RunLambda {

					public static void main(String[] args) {
						FunctinalLambda lambda = i ->  new Employee(i, "Thejas");										lambda.getEmployee(2);
					}
				}


**In java we have a internal foreach loop for a list , the input parameter for the internal forEach(java.util.function.Consumer), we have to pass a consumer object

	Consume is a functional Interface it has accept method

	java.util.function.Consumer was introduced in java 8

		eg List<Employee> employeeList=new ArrayList<>();

		employeeList.forEach(i -> sop(i)); //This will iterate the list

**Anonymus Innner class- A class without any name used inside a class if we use there will not be a innclasss.class file created

	Limitations Of Lamnda Functions

	1.Variable used in lambda expression should be final or effectively final
	2. We can only implement one method for a reference.

3.Stream api

	A java stream is a component which provides functionality for processing the elements during iteration

Stream spi are used to method chaining

To use stream we need to 
	1.Obtain a stream
	2.call zero or non tearminal operation on stream
	3.call terminal operartion  on stream

	Intermidiate Operation
	Intermidiate operations add element processing operations to the stream, but does not start the iteration of the elements.
	Intermediate operation is lazy and Terminal operations is not.
	 We cannot repeat the intermidiate Operation on a stream , it will not have any compitaion error but it will throw exception.
	 we need to call the method using the new stream returned from the previous stream

	When you invoke an intermediate operation on a stream, the operation is not executed immediately. It is executed only when a terminal operation is invoked on that stream
	You can chain multiple intermediate operations and none of them will do anything until you invoke a terminal operation
	All intermediate operations return Stream (can be chained), while terminal operations don't. 

**Intermediate Operations are:

	filter(Predicate<T>)
	map(Function<T>)

Terminal operations produces a non-stream (cannot be chained) result such as primitive value, a collection or no value at all.

**Terminal Operations are:
	forEach
	forEachOrdered
	toArray

**Call by Method or Method Reference  in java 
	eg
	List<String> name=Arrays.asList("Naven","manoj","Raju");

	name.forEach(System.out :: println); // We are not using lambda here , we are using method reference here

	the above line is called function programming , here we are passing the method inside a method and we should use class name followed by 2 double colns followed by method name.
	When passing the method the class should be a functional Interface

**Java 9
	
	The collectionFactory method, java has added new static method in list,set,map interface which will allow us to create immutable objects of these collections
	eg List.of();
		Set.of();
		Map.of();

	1.Jigsaw project-
	 Jigsaw project helps us to achieve modularity

	 rt.jar- runtime jar- It has all the classes like string,system all belong to this jar

	 We are not using jar we r using modules which is required for a particulr project instead of using one big jar

	2.REPL- Read Evolve Print Loop- with the help of jshell- It is helpful for learing, to write sop statemtne we dont have to create a class or method we just have to use the jshell terminal.

	3.Enhancement of stream api
	4.In java9 we can have private methods defined in interface	

**Java11

In string there is a method called repeat(3);
which will repeat 3 times

isBlank()- Cheks whether the given string is blank

In Java 11, there are various methods, such as writeString(), readString(), and isSameFile() which help us to perform several operations on file.

A static not method has been added to the Predicate interface. We can use it to negate an existing predicate, much like the negate method:

				List withoutBlanks = sampleList.stream()
		  .filter(Predicate.not(String::isBlank))
  
  Support for using the local variable syntax (var keyword) in lambda parameters was added in Java 11.

We can make use of this feature to apply modifiers to our local variables, like defining a type annotation:

		List<String> sampleList = Arrays.asList("Java", "Kotlin");
		String resultString = sampleList.stream()
		  .map((@Nonnull var x) -> x.toUpperCase())
		  .collect(Collectors.joining(", "));
		assertThat(resultString).isEqualTo("JAVA, KOTLIN");

WE can use annotations in lambda expressions 
Consumer<String> consumer=(@Depriceted var i) -> sop("this is the string");

Java 17 
Record video https://www.youtube.com/watch?v=gJ9DYC-jswo&t=174s
	we have record classes record Employee (int id,String name) {} we dont have to create a class just this one will is enough. toString, hashcode methods are by default implememted for these record classes. The record class will not have setters by default all the fields will be private final, we can have only static fields ,non static fields are not allowed. we can have both static and non static methods
public record User(Integer userId,String userName,String address) {
    
    public static String field="Abs";
    //but you cannot create a non static variable 
   
    public static void print(){
        System.out.println("das");
    }

    public  void print1(){
        System.out.println("das1");
    }
}
	
-----------------------------

2.Type script questions and variables
3.events and its advantage
4.routing and its advantage
5.pipes
6.current versions of spring,hibernate,angular


Array Programs

 https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html

https://www.javacodegeeks.com/2013/11/spring-security-behind-the-scenes.html
Spring security behind the scenes
Mongodb questions

MultiThreading
Different scopes in sprng
@Restcontroller and @Controller implementation
Spring mvc+angular
https://examples.javacodegeeks.com/enterprise-java/spring/mvc/spring-mvc-and-angular-6-example/
