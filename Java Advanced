OOPS Concepts

You cannot declare two methods with the same signature even if they have a different return type.


 The compiler automatically provides a no-argument, default constructor for any class without constructors. This default constructor will call the no-argument constructor of the superclass.
  In this situation, the compiler will complain if the superclass doesn't have a no-argument constructor so you must verify that it does.
If you have a parametrised constructor in your child then even parent class should have no-argument constructor or the same parametrised constructor in the parent and you should explicitly invoke it as the first statement in the child class constructor

  The Java runtime environment deletes objects when it determines that they are no longer being used. This process is called garbage collection
  	The garbage collector automatically cleans up unused objects. An object is unused if the program holds no more references to it. You can explicitly drop a reference by setting the variable holding the reference to null

  Covariant return, means that when one overrides a method, the return type of the overriding method is allowed to be a subtype of the overridden method's return type.

	To clarify this with an example, a common case is Object.clone() - which is declared to return a type of Object, we can override this method to return the Object of the classs type.

Use the most restrictive access level that makes sense for a particular member. Use private unless you have a good reason not to.

Non static block-The Java compiler copies initializer blocks into every constructor. Therefore, this approach can be used to share a block of code between multiple constructors.


execution order
	
	Static block and static variables defined in the parent class in the order they are defined

	Static block and static variables defined in the child class in the order they are defined

	non Static block and non static variables defined in the parent class in the order they are defined

	parent class constructor

non Static block and non static variables defined in the child class in the order they are defined

	child class constructor

this keyword-	Within an instance method or a constructor, this is a reference to the current object — the object whose method or constructor is being called. You can refer to any member of the current object from within an instance method or a constructor by using this
Java complier internally will replace string contacination(s1+s2+s3+s4) wih StringBuilder if there are more than 2 concatination.
Class
1.Outer classs can be declared public or package-private(default)

	default means it is visible only inside a package

	There are 2 types of nested classed,
		1.Static Nested class
		2.Inner classes(Non static nested classes)
			Inner classes are of 2 more types which are defined inside the method body
					1.Local classes
					2.Annonymous Class


	Need for Nested Class

	1.If a class is used only in one place then we can create a inner class,
	2.It increases encapsulation-If we want to create a private vaiable and also to provide access to other class 


NESTED classes 2 types

1.STATIC NESTED CLASS

	a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.

	Static Nested class is a regular class it can be acessed outisde the outer class also

	static class has access to the all the static members including those declared private

	We can access the non static members of a static class by creating the object of a static class

	Static Nested class do not have access to non static members of the outer class.They can access them by creating objects

2.NON STATIC CLASS OR INNER CLASS		

	Inner class cannot have static declarations because inner class is always associated with the instance.(untill java 16)
	AFTER JAVA16 WE CAN HAVE STATIC MEMBERS INSIDE NON STATIC CLASS

	can have static members provided that they are constant variables(untill java 16).
	AFTER JAVA16 WE CAN HAVE STATIC MEMBERS INSIDE NON STATIC CLASS

	Inner class have access to all the fields of enclosing class even if they are declared private,

	Nested class can be declared private,protected,Default(package private),public

To Acess the inner class variables we have to the following
	we have to create a outer class Instance and using that we have to access the inner class variables

		Outer o=new Outer();
		Outer.Inner u= o.new Inner();

		If we want to access the outer class non static variables then we dont have to create the objects of outer class

		public class InnerRun  {
		private int it=10;
		int j=20;
	
	
		public class Ulai{
		public void getUlai(){
			
		System.out.println(j+it);
		}
	}

		}

**An instance of InnerClass can exist only within an instance of OuterClass and has direct access to the methods and fields of its enclosing instance.

	If a class is defined inside a class then 
	Vehicle v =new Vehicle();
	Vehicle.Bike b = v.new Bike();

		to access the inner class members

			There are additional two special kinds of inner classes: local classes and anonymous classes.

			Non static inner class can access the static and non static variables of the outer class

			1. Local classes are the classes that are defined inside the block, typically inside the body of the method or a for loop or if condition

				A local class has access to the members of its enclosing class,
				The local class can only access local variables which are declard final or effectively final

				Starting in Java SE 8, if you declare the local class in a method, it can access the method's parameters(but it has to be effective final, we cannot change the value ,we can only use it)

				For global variables there is no such restriction .

				(effective final- a varibale whose value did not change afte the initialization)

*A local class can have static members provided that they are constant variables. (A constant variable is a variable of primitive type or type String that is declared final and initialized with a compile-time constant expression.

*You cannot have interface inside the block as they are inherently static

	Shadowing 

		1.To refer to the member variable of the inner class FirstLevel, use the keyword this to represent the enclosing scope:
			System.out.println("this.x = " + this.x);
		2.Refer to member variables that enclose larger scopes by the class name to which they belong
			System.out.println("ShadowTest.this.x = " + ShadowTest.this.x);


Serialization of inner classes, including local and anonymous classes, is strongly discouraged.

When the Java compiler compiles certain constructs, such as inner classes, it creates synthetic constructs; these are classes, methods, fields, and other constructs that do not have a corresponding construct in the source code. 
synthetic constructs can vary among different Java compiler implementations, which means that .class files can vary among different implementations as well. Consequently, you may have compatibility issues if you serialize an inner class and then deserialize it with a different JRE implementation.
							
	2.Anonymous class- it is an expression
					Class which are declared and instantiated in the same time which do not have name

					Create a anonymous class if you want to use a local class only once

					Anonymous class can access only those local variables which are decaled final or effective final.

					You cannot declare static initializers or member interfaces in an anonymous class.

					An anonymous class can have static members provided that they are constant variables.

					You cannot declare constructrs in Anonymous class

**Inner classes may inherit static members that are not compile-time constants even though they may not declare them. Nested classes that are not inner classes may declare static members freely, in accordance with the usual rules of the Java programming language.

**Inner Class

	1.The scope of a nested class is bounded by the scope of its enclosing class.NestedClass does not exist independently of class OuterClass.
	2.A nested class has access to the members, including private members, of the class in which it is nested. However, reverse is not true i.e. the enclosing class does not have access to the members of the nested class.
	3.A nested class is also a member of its enclosing class.
	
For inner class the class file will be created name will be A$B.class where A is the outer class and B is the inner class

** Anonymous Objects are objects without reference
	new A().showEmployee();// This does not have a reference and hence it will not utilize the stack memory , it will use only heap

	Since anonymous objects dont have reference , they are eligible for garbage collection

LAMBDA EXPRESSIONS

	Functional Interface cannot have a inner class as well
	
like local classes and annonymous classes , Lambda expressions can only access members of enclosing scope which are final or effective final
	
	Like local and anonymous classes, lambda expressions can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, lambda expressions do not have any shadowing issues 

	Lambda expressions are lexically scoped. This means that they do not inherit any names from a supertype or introduce a new level of scoping

	 the JDK defines several standard functional interfaces, which you can find in the package java.util.function

 	you do not have to enclose a void method invocation in braces

	 If there is single expression then we do not need to use flower brackets {}, also Java runtime evaluates the expression and return the value.

	 A return statement is not an expression in a lambda expression, you must enclose statements in braces ({}). However, you do not have to enclose a void method invocation in braces. 
	

	 PREDICATE<T>: has a method test(T t) which returns a boolean value

	 CONSUMER<T>: has a method accept(T t) which has void return type

	  FUNCTION<T,R>: interface contains the method R apply(T t)

	 SUPPLIER:The functional interface Supplier contains one method get that takes no arguments and returns an object(use can use it to return a new object)
	 				eg:	() -> { return new HashSet<>(); }

	 BiFunction<T, T, T> merger is a function interface which accepts 2 arguments and produce result, has method apply

	when to use

	Nested class: Use it if your requirements are similar to those of a local class, you want to make the type more widely available, 	and you don't require access to local variables or method parameters.
	If you want to create a Builder.Linked list Node is a private static class

	Use a non-static nested class (or inner class) if you require access to an enclosing instance's non-public fields and methods. 		Use a static nested class if you don't require this access.

			Local Classes-
					If you need to create more than once instance of a class 
					Invoke additional methods later or access its constructor(Similar to normal class).
	
			Anonymous class
				If you want to use a class only once.	
				you cannot have parametrized constructors here

			Lambda Expressions
					If you need to implement a functional interface,or
					 do not want to access the constructor
					  or you dont want to add additional fields etc


METHOD REFERENCE

	If you are using lambda expressions to call a method then use method reference

	Are easy to read lambda expressions for methods that already have a name. 

	Reference to a static method	ContainingClass::staticMethodName

	Reference to an instance method of a particular object	containingObject::instanceMethodName

	Reference to an instance method of an arbitrary object of a particular type ContainingType::methodName
		eg:Arrays.sort(stringArray, String::compareToIgnoreCase);

	Reference to a constructor ClassName::new

	eg for constructor reference

		You can use a constructor reference in place of the lambda expression as follows:

		Set<Person> rosterSet = transferElements(roster, HashSet::new);
			The Java compiler infers that you want to create a HashSet collection that contains elements of type Person. 

	Method definition (particular body, signature and a return type) exists; why shall I create a new lambda expression if I can 		reuse existing code? let's refer to the already defined method and reuse it.

	you can replace (x, y) -> x.compareToIgnoreCase(y) with String::compareToIgnoreCase method reference
Streams

	Pipeline is a sequence of aggregate operations

	Stream is not a data structure that holds the data, its a carries values from a source through a pipeline

	Stream has a source

	Stream has zero or more intermediate operations which return a stream of its predicate type eg filter,mapInt etc method of stream

	Stream has Terminal operation which does not return a stream eg forEach,average method of stream

			 list.stream().
                mapToInt(s->Integer.parseInt(s)).
                filter(e-> e%2==0).
                forEach((m)->System.out.println(m));

Reduce and Collect
	Reduce is used for immutable reduction  and Collect is used as mutable reduction 
	that means-if you have immutable values such as ints, doubles, Strings then normal reduction works just fine. However, if you 		have to reduce your values into say a List (mutable data structure) then you need to use mutable reduction with the collect 		method.

	Reduce is a "fold" operation, it applies a binary operator to each element in the stream where the first argument to the operator 	is the return value of the previous application and the second argument is the current stream element.

	If we wanted to take a stream of strings and concatenate them into a single long string, we could achieve this with ordinary 		reduction:
			String concatenated = strings.reduce("", String::concat)  

	Collect is an aggregation operation where a "collection" is created and each element is "added" to that collection. Collections 	in different parts of the stream are then added together

	 Reduction Operations:The JDK contains many terminal operations such as average that return one value by combining the contents 	of a stream.
	 	eg:average,getAsDouble() etc
	
	 For general purpose reduction use stream.reduce method 

 For parallel streams they perform fork joint pool source will be split into individual sub tasks(roughly 4* number of cores).

			 		eg

		 Optional max=Stream.of(1,4,3,5,21,14).reduce(Integer::max);

or
			Integer totalAgeReduce = roster
			   .stream()
			   .map(Person::getAge)
			   .reduce(
			       0,
			       (a, b) -> a + b);

	The reduce operation in this example takes two arguments:

	identity: The identity element is both the initial value of the reduction and the default result if there are no elements in the stream. In this example, the identity element is 0; this is the initial value of the sum of ages and the default value if no members exist in the collection roster.

	accumulator: The accumulator function takes two parameters: a partial result of the reduction (in this example, the sum of all processed integers so far) and 	the next element of the stream (in this example, an integer). It returns a new partial result. In this example, the accumulator function is a lambda expression that adds two Integer values and returns an Integer value:

						(a, b) -> a + b

	The reduce operation always returns a new value. However, the accumulator function also returns a new value every time it processes an element of a stream

	There is one more reduce operation with 3 arguments- It has a intial value,accumulator function and Combiner funtion
	The combiner function is usually used for parallel streams, for combining the results of each streams running in parallel
	Even if we are using sequential stream we cannot pass null as third argument.we will get null pointer exception

	Collector is a interface and Collectors is a implementation for Collector which has methods like Collectors.toList etc.	

Reduce vs Collect	
Reduce is used for immutable reduction  and Collect is used as mutable reduction 

reduce is a "fold" operation, it applies a binary operator to each element in the stream where the first argument to the operator is the return value of the previous application and the second argument is the current stream element.

collect is an aggregation operation where a "collection" is created and each element is "added" to that collection. Collections in different parts of the stream are then added together.		

 Differences Between Streams and Iterators
	
why you should favour the streams API over Iterators.
	First and foremost, with the stream API, we can now program at a much higher level of abstraction, just like SQL queries, i.e. 		we express what we want and let the library handle the rest.

	Second, stream operations perform their iterations behind the scenes (internal iteration) , this means the processing of the 		data could be done in parallel or in a different order that may be more optimized.

	However, external iteration can only iterate over the elements of a collection sequentially. 
	Internal iteration does not have this limitation. It can more easily take advantage of parallel computing.

	On the other hand, if you decide to explicitly iterate over your collection to perform some computation whether that's with an Iterator or the syntactic sugar for an iterator (the enhanced for loop) then you're explicitly taking the items in the collection and processing them one by one thus it's inherently serial.

	Aggregate operations use internal Iteration,they do not contain a method like next to instruct them to process the next element of the collection. With internal delegation, your application determines what collection it iterates, but the JDK determines how to iterate the collection. With external iteration, your application determines both what collection it iterates and how it iterates it. 

	Using iterators instead of the stream API also means a lot more work has to be done when you want to go parallel or find different ways to optimise your program.

	Yet, this also means that you're spending much more time dealing with the low-level details instead of just focusing on what you want your program to do.

Also mentioned in the Java-8 in Action book:

	The internal iteration in the Streams library can automatically choose a data representation and implementation of parallelism to match your hardware. By contrast, once you’ve chosen external iteration by writing for-each, then you’ve essentially committed to self-manage any parallelism. (Self-managing in practice means either “one fine day we’ll parallelize this” or “starting the long and arduous battle involving tasks and synchronized”.)

	Java 8 needed an interface like Collection but without iterators, ergo Stream!

	Essentially, with the stream API, your life is much easier in many ways but what I find most useful is the fact that you can now put more time into focusing on what you want your code to do and at the same time you can decide to go parallel without dealing with the low-level stuff.

	This is of course not saying to always utilise streams wherever/whenever possible. Rather it's stating the benefits of using streams over Iterators.

	There are certain places where it will be more appropriate to use Iterators rather than the stream API and vice versa. So choose wisely which approach to proceed with in terms of processing data in collections.

They process elements from a stream: Aggregate operations process elements from a stream, not directly from a collection. Consequently, they are also called stream operations.

They support behavior as parameters: You can specify lambda expressions as parameters for most aggregate operations. This enables you to customize the behavior of a particular aggregate operation.

Collection.forEach() uses the collection iterator and the processing order is defined

Collection.stream().forEach() ignores the iretaror and take the element one by one hence the processing order is not defined.

Iterable vs Iterator

ArrayList implements List, List extends Collection, Collection extends Iterable
		Iterable <- Collection <- List <- ArrayList'
		Iterable, Collection and List just declare abstract method 'iterator()' and ArrayList alone implements it

	An Iterable is a simple representation of a series of elements that can be iterated over. It does not have any iteration state such as a "current element". Instead, it has one method that produces an Iterator.

	An Iterator is the object with iteration state. It lets you check if it has more elements using hasNext() and move to the next element (if any) using next().

	Typically, an Iterable should be able to produce any number of valid Iterators.

	An implementation of Iterable is one that provides an Iterator of itself:

		public interface Iterable<T>
		{
		    Iterator<T> iterator();
		}

For-each loop
		This is a methods of Iterable interface. All the Collection interfaces extends Iterable Interface.

		The for-each loop hides the iterator, so you cannot call remove. Therefore, the for-each loop is not usable for 			filtering.
		It is not usable for loops where you need to replace elements in a list or array as you traverse it. 
		Finally, it is not usable for loops that must iterate over multiple collections in parallel. 

Iterable Interface

		public interface Iterable<T>
		Implementing this interface allows an object to be the target of the "for-each loop" statement.

		Iterable
		https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html

		comparator
		https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html

Interface

		Interface allows static methods,default methods,constants and method signatures.
		Interface can be either public or default(package private)

		All the components in the interface are public( we dont have to explicitly declare it)

		All the constants are by default public static final( we dont have to explicitly declare it)

		Default methods enable you to add new functionality to existing interfaces and ensure binary compatibility with code written for older versions of those interfaces.

			interface TestInterface
			{
			    // abstract method
			    public void square(int a);
			
			    // default method
			    default void show()
			    {
			      System.out.println("Default Method Executed");
			    }
			}

Copying Object in java

	1.Shallow Copying- Reference is copied, if copied object is changed, main object is also changed

						Obj o=new Obj();
						0.i="test";

						Obj o1=o// shallow cpoying here we are not creating 2 objects instead we are craeting 2 references
	2.Deep Copying

	New Object is created and all the values of the actual object are copied into it

					Obj o=new Obj();
						o.i="test";

						Obj o1=new Obj()// deep cpoying
						o1.i=o.i
	3.Cloning

By Implementing Clonable Interface and by overriding a public void clone method
Note that the super.clone() call returns a shallow copy of an object, but we set deep copies of mutable fields manually, so the result is correct https://www.geeksforgeeks.org/clone-method-in-java-2/

We can also achieve deep copying using a copy constructor.

		class Person {
	private String name;
	private int age;

	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public Person(Person another) {
		this(another.name, another.age);
	}

	// Getters and setters for the instance variables
}

Serilization is a concept where we can maintian the state of an object, we can either convert the state of object into file supported form or network supported form
	
	Transient vairables- It can be used only on global variables, It cannot be used on methods nor on local variables
		When we use transient variable jvm will ignore the value and will use the default value depending on the data type.

		By default Java provides ObjectOutputStream-> writeObject method and ObjectInputStream-> readObject method for serializing and deserializing respectively

		If we want to control the versioning, we need to provide the serialVersionUID attribute. This attribute is used to verify that the saved and loaded objects are compatible. Therefore, we need to ensure it is always the same, or else InvalidClassException will be thrown

		Java serialization heavily uses I/O streams. We need to close a stream immediately after a read or write operation because if we forget to close the stream, we'll end up with a resource leak
Seralization and Deserialization

	Is the process of converting the object into byte array so that it can be transferred into a file or over a network

		Using FileOutPutStream for file and ObjectOutPutStream for Object we can achieve this -Serializzation


		Is the process of converting the Byte array back to java object so that it can be transferred into a file or over a network

		Using FileInputPutStream for file and ObjectInputPutStream for Object we can achieve this -Serializzation


	Transcient is a keyword which is only used for variables
	Transcient will not serialize the object value it will send the default value of the field

	transcient  int i=10;  //o/p will be 0

	transcient final int i=10;  //o/p will be 10 ( because for final variables value will be assigned at compile time)
		if final variable is initilized inside constructor then transcient will work, op will be 0

	transcient static int i=10;  //o/p will be 10 (only non static variables participate in serialization)

	for serialzation the order in which we serialize , the same order we have to deserialze. 
	if we do not know the order then we can use instanceOf operator for find the instance

	*Object Graph- When we serialze a object , set of all objects which are reachable to that object will be serialized

	while adding customized Serialization we have to implement
	private void WriteObject(OOS oos);
	private void readObject(OIS ois); if we dont implement these methods then jvm will use the defaut serialisation methods
	*these 2 methods are called automatically by jvm hence they are called call back methods

	continue from here https://www.youtube.com/watch?v=p-98X_1mMIY

Custom Serialization
		
		1.Externaizable- It is a subclasss of Serializable marker interface.
					Should be used when we want custom serilization where some attributes of a class cannot be serilised.
					Any class which implements this should override

					public void writeExternal(ObjectOutput out) throws IOException;

					public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;

	The key difference here is how we handle the serialization process. When a class implements the java.io.Serializable interface, the JVM takes full responsibility for serializing the class instance. In case of Externalizable, it's the programmer who should take care of the whole serialization and also deserialization process.

Use Case
	If we need to serialize the entire object, the Serializable interface is a better fit. On the other hand, for custom serialization, we can control the process using Externalizable.

Performance
The java.io.Serializable interface uses reflection and metadata which causes relatively slow performance. 
By comparison, the Externalizable interface gives you full control over the serialization process.

Reading Order
While using Externalizable, it's mandatory to read all the field states in the exact order as they were written. Otherwise, we'll get an exception.
For example, if we change the reading order of the code and name properties in the Country class, a java.io.EOFException will be thrown.

Meanwhile, the Serializable interface doesn't have that requirement.
	Externalisable needs a default constructor ,Java serilisation does not require this
	Performance wise Externalisable is better

Custom Serialization
		We can achieve custom serialization with the Serializable interface by marking the field with transient keyword. The JVM won't serialize the particular field but it'll add up the field to file storage with the default value. That's why it's a good practice to use Externalizable in case of custom serialization.

	Gson and Jackson are the 2 libraries to convert a object to and from json

Spring internally uses Jackson as the default Seriliser .
If we use @Controller annotation
	@RequestBody annotation will make spring to automatically deserialise the input json object into java object
	@ResponseBody annotation will serialise the Output java objet into json object automatically.

If we use @RestController then spring automatically will do the serialisation and deserilisation without these annotations.

			Furthur reading
		https://www.baeldung.com/java-serialization-approaches

-------------------------------------------------------------------------------------------------------------------
Java Collection

https://docs.oracle.com/javase/tutorial/collections/intro/index.html
https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html

https://docs.oracle.com/javase/tutorial/collections/streams/index.html

Time complexity
https://www.bigocheatsheet.com/

https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach8

Animal a =new Animal();
Animal.Cat c=a.new Cat();

https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html
