

***********************************************************	Transaction Management ***********************************************



		Different transaction APIs such as JTA, JDBC, Hibernate, JPA, and JDO.


		There are 2 choices for Transaction Managemet

		Local Transaction and Global Transaction

Why we prefer Spring

		Global Transactions are managed by application server using Transaction ApI's like JTA.
							They have the ability to work with multiple Transactional resources like relational databases

							Previously EJB was the preferred way to use global Transaction(Container Transaction Management).
							CMT is a declarative Transaction Management

		Local Transaction are resource Specific- Eg JDBC Transaction Management
							In local transaction, the Application server is not involved.
							Local transactions may be easier to use, but have significant disadvantages: they cannot work across multiple transactional resources. For example, code that manages transactions using a JDBC connection cannot run within a global JTA transaction. Another downside is that local transactions tend to be invasive to the programming model.


Spring resolves these problems. It enables application developers to use a consistent programming model in any environment. You write your code once, and it can benefit from different transaction management strategies in different environments. The Spring Framework provides both declarative and programmatic transaction management. Declarative transaction management is preferred by most users, and is recommended in most cases.


While the EJB default behavior is for the EJB container to automatically roll back the transaction on a system exception (usually a runtime exception), EJB CMT does not roll back the transaction automatically on an application exception (that is, a checked exception other than java.rmi.RemoteException). While the Spring default behavior for declarative transaction management follows EJB convention (roll back is automatic only on unchecked exceptions), it is often useful to customize this.

		Declarative Transaction Managemet

		Springs decalartive transaction makes use of AOP as its foundation.


				The recommended way to indicate to the Spring Framework's transaction infrastructure that a transaction's work is to be rolled back is to throw an Exception from code that is currently executing in the context of a transaction. The Spring Framework's transaction infrastructure code will catch any unhandled Exception as it bubbles up the call stack, and will mark the transaction for rollback.

				Note however that the Spring Framework's transaction infrastructure code will, by default, only mark a transaction for rollback in the case of runtime, unchecked exceptions; that is, when the thrown exception is an instance or subclass of RuntimeException. (Errors will also - by default - result in a rollback.) Checked exceptions that are thrown from a transactional method will not result in the transaction being rolled back.


		Transaction Setting can be applied to the entire service layer or we can exclude certain classes or even add different Transaction rules to different Sevices


		Inside Spring generic configuration, we have used  <tx:annotation-driven /> . It means that all @Transactional annotations should be scanned at startup time and the targeted methods should become transactional

		Before startup nothing no proxy will be added but during startup a proxy will be added which will add the transactional behaviour.


		@Transactional

				How it works

					when ever spring sees @Transactional annotation, it will create proxies for the  class or the member, which will allow spring to inject behaviours before,after or around the method calls.
					Transaction management is just one example of the behaviors that can be hooked in. Security checks are another. And you can provide your own, too, for things like logging.

					Spring dynamically creates proxy that is same as the interface which our class implements, 
					Proxes can also be supplied with interceptors which will be invoked by the proxy before invoking the target method.
					So when you call the method from client code, you're calling the method on the proxy object, which first invokes the TransactionInterceptor (which begins a transaction), which in turn invokes the method on your target bean. When the invocation finishes, the TransactionInterceptor commits/rolls back the transaction. It's transparent to the client code
				
					The proxy mechanism only works when calls come in from some external object. When you make an internal call within the object, you're really making a call through the this reference, which bypasses the proxy.


Using Annotation @Transactional
										@Transactional
								public class DefaultFooService implements FooService {

								  Foo getFoo(String fooName);

								  Foo getFoo(String fooName, String barName);

								  void insertFoo(Foo foo);

								  void updateFoo(Foo foo);
								}



		When the above POJO is defined as a bean in a Spring IoC container, the bean instance can be made transactional by adding merely one line of XML configuration, like so:

				<!-- from the file 'context.xml' -->
				<?xml version="1.0" encoding="UTF-8"?>
				<beans xmlns="http://www.springframework.org/schema/beans"
				     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				     xmlns:aop="http://www.springframework.org/schema/aop"
				     xmlns:tx="http://www.springframework.org/schema/tx"
				     xsi:schemaLocation="
				     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
				  
				  <!-- this is the service object that we want to make transactional -->
				  <bean id="fooService" class="x.y.service.DefaultFooService"/>

				  <!-- enable the configuration of transactional behavior based on annotations -->
				  <tx:annotation-driven transaction-manager="txManager"/>

				  <!-- a PlatformTransactionManager is still required -->
				  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				  <!-- (this dependency is defined somewhere else) -->
				  <property name="dataSource" ref="dataSource"/>
				  </bean>
				  
				  <!-- other <bean/> definitions here -->

				</beans>



				You can actually omit the 'transaction-manager' attribute in the <tx:annotation-driven/> tag if the bean name of the PlatformTransactionManager that you want to wire in has the name 'transactionManager'. If the PlatformTransactionManager bean that you want to dependency inject has any other name, then you have to be explicit and use the 'transaction-manager' attribute as in the example above.

	@Transaction Annotation can be placed on top of interface decalarion,interface methods,  a class definition, or a public method on a class.

	For non pulblic method we have to use ,for internal invocaation use ApsectJ where there is no concept of proxy, the target class will be wieved (the actual byte code of the class will be modifed) to use @Transactional on any method.

	The Spring team's recommendation is that you only annotate concrete classes with the @Transactional annotation, as opposed to annotating interfaces. You certainly can place the @Transactional annotation on an interface (or an interface method), but this will only work as you would expect it to if you are using interface-based proxies.

	 The fact that annotations are not inherited means that if you are using class-based proxies (proxy-target-class="true") or the weaving-based aspect (mode="aspectj") then the transaction settings will not be recognised by the proxying/weaving infrastructure and the object will not be wrapped in a transactional proxy (which would be decidedly bad). So please do take the Spring team's advice and only annotate concrete classes (and the methods of concrete classes) with the @Transactional annotation.

**Putting @Transaction annotation is not enought to acivate the transaction behaviour, its justa metadata. It is the presence of 			the <tx:annotation-driven/> element that switches on the transactional behavior.

	Spring 3.1 introduces the @EnableTransactionManagement annotation that we can use in a @Configuration class to enable transactional support

	ASPECTJ

		A @Transactional annotation on a method within the class overrides the default transaction semantics given by the class annotation (if present). Methods with public, protected, and default visibility may all be annotated. Annotating protected and default visibility methods directly is the only way to get transaction demarcation for the execution of such methods.


Rolling Back

		The recomended way to indicate the spring frameworks transaction infrastructre to rollback is by throwing the exception.
		 The Spring Framework's transaction infrastructure code will catch any unhandled Exception as it bubbles up the call stack, and will mark the transaction for rollback.

		 By default only unchecked,runtime exceptions will be rolled back.Checked exceptions are not rolled back by default.

		 They need to be configured like

		 			<tx:advice id="txAdvice" transaction-manager="txManager">
					  <tx:attributes>
					  <tx:method name="get*" read-only="true" rollback-for="NoProductInStockException"/>
					  <tx:method name="*"/>
					  </tx:attributes>
					</tx:advice>
		We can also use no-rollback-for="InstrumentNotFoundException" to not rollback.

		When the Spring Framework's transaction infrastructure has caught an exception and is consulting any configured rollback rules to determine whether or not to mark the transaction for rollback, the strongest matching rule wins. So in the case of the following configuration, any exception other than an InstrumentNotFoundException would result in the attendant transaction being marked for rollback.

		<tx:advice id="txAdvice">
		  <tx:attributes>
		  <tx:method name="*" rollback-for="Throwable" no-rollback-for="InstrumentNotFoundException"/>
		  </tx:attributes>
		</tx:advice>


		
Note that <tx:annotation-driven/> only looks for @Transactional on beans in the same application context it is defined in. This means that, if you put <tx:annotation-driven/> in a WebApplicationContext for a DispatcherServlet, it only checks for @Transactional beans in your controllers, and not your services. See Section 13.2, “The DispatcherServlet” for more information.


Example on How to add transaction and make certain db calls read-only


										<!-- from the file 'context.xml' -->
						<?xml version="1.0" encoding="UTF-8"?>
						<beans xmlns="http://www.springframework.org/schema/beans"
						     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
						     xmlns:aop="http://www.springframework.org/schema/aop"
						     xmlns:tx="http://www.springframework.org/schema/tx"
						     xsi:schemaLocation="
						     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
						     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
						  
						  <!-- this is the service object that we want to make transactional -->
						  <bean id="fooService" class="x.y.service.DefaultFooService"/>

						  <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
						  <tx:advice id="txAdvice" transaction-manager="txManager">
							  <!-- the transactional semantics... -->
							 	 <tx:attributes>
								    <!-- all methods starting with 'get' are read-only -->
								    <tx:method name="get*" read-only="true"/>
								    <!-- other methods use the default transaction settings (see below) -->
								    <tx:method name="*"/>
							  	</tx:attributes>
						  </tx:advice>
						  
						  <!-- ensure that the above transactional advice runs for any execution
						    of an operation defined by the FooService interface -->
						  <aop:config>
							  <aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/>
							  <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
						  </aop:config>
						  
						  <!-- don't forget the DataSource -->
						  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
							  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
							  <property name="url" value="jdbc:oracle:thin:@rj-t42:1521:elvis"/>
							  <property name="username" value="scott"/>
							  <property name="password" value="tiger"/>
						  </bean>

						  <!-- similarly, don't forget the PlatformTransactionManager -->
						  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
						  		<property name="dataSource" ref="dataSource"/>
						  </bean>
						  
						  <!-- other <bean/> definitions here -->

						</beans>



https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/pt01.html


https://docs.spring.io/spring-framework/docs/2.5.x/reference/transaction.html#transaction-declarative


https://docs.spring.io/spring-framework/docs/2.5.x/reference/aop.html


https://docs.spring.io/spring-framework/docs/2.5.x/reference/beans.html#beans-annotation-config