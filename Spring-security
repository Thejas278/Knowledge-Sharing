Spring Security AutoConfiguration
		
Sprig Security workflow

	The client sends a request to the application, and the container creates a FilterChain which contains the Filters and Servlet that should 			process the HttpServletRequest based on the path of the request URI.
	
	In a Spring MVC application the Servlet is an instance of DispatcherServlet. At most one Servlet can handle a single HttpServletRequest and 			HttpServletResponse. However, more than one Filter can be used to:

			a:Prevent downstream Filters or the Servlet from being invoked. In this instance the Filter will typically write the HttpServletResponse.

			b:Modify the HttpServletRequest or HttpServletResponse used by the downstream Filters and Servlet

DelegatingFilterProxy
	
	Spring provides a Filter implementation named DelegatingFilterProxy that allows bridging between the Servlet container’s lifecycle and Spring’s 		ApplicationContext. 
	
	The Servlet container allows registering Filters using its own standards, but it is not aware of Spring defined Beans. DelegatingFilterProxy can be registered 		via standard Servlet container mechanisms, but delegate all the work to a Spring Bean that implements Filter.
	For non spring boot application we have to add the DelegatingFilterProxy manually in the web.xml with url patter as /**.
	
	When we add the spring security dependency there are around 4-5 spring security fileters and The delegating filter proxy will delegate the request to these 		security filters.Among the 4-5 filters one the filter is a authorisation filter
	
FilterChainProxy
	Spring Security’s Servlet support is contained within FilterChainProxy.
	FilterChainProxy is a special Filter provided by Spring Security that allows delegating to many Filter instances through SecurityFilterChain.
	Since FilterChainProxy is a Bean, it is typically wrapped in a DelegatingFilterProxy.
	
SecurityFilterChain is used by FilterChainProxy to determine which Spring Security Filter instances should be invoked for the current request.

AuthenticationManager is responsible for authentication in spring security app . It has a method called autnenticate().
AuthenticationManagerBulilder class is responsible to get the AuthenticationManager.
WebSecurityConfigureAdapter is a class which provides us the AuthenticationManagerBulilder instance , we have to extend this class to get AuthenticationManagerBulilder so that we can add our custom logic

Authorization
	For authorization also we use the same WebSecurityConfigureAdapter where we have to override public void configure(HttpSecurity http) method 
	* Order for the ant matcher patterns will be most restrictive to least restrictive.
	
	There is a Interface AuthenticationProvider which has some implementations which do the actual AUthentication, It has a method called authenticate().
	
Authenticaition Objetc is like a DTO which will have crediatial and once the crediantial is valiedate the same Authentication object will return the principal user info as well.

This Authentication object will be stored in the security context which will be saved in the local thread so that we can get the info about current logged in user any where.

Also there is one more spring security filter which will store the principal object in the session so that we dont have to authenticate for every request and it will take this object and it will save it for thread local for every request.


Read the  document for proper understanding : https://docs.spring.io/spring-security/reference/servlet/getting-started.html
		
		Spring Boot automatically:

			Enables Spring Security’s default configuration, which creates a servlet Filter as a bean named springSecurityFilterChain. This bean is 				responsible for all the security (protecting the application URLs, validating submitted username and passwords, redirecting to the log 					in form, and so on) within your application.

				Creates a UserDetailsService bean with a username of user and a randomly generated password that is logged to the console.

				Registers the Filter with a bean named springSecurityFilterChain with the Servlet container for every request.

				Spring Boot is not configuring much, but it does a lot. A summary of the features follows:

				Require an authenticated user for any interaction with the application

				Generate a default login form for you

				Let the user with a username of user and a password that is logged to the console to authenticate with form-based authentication 
				Protects the password storage with BCrypt

				Lets the user log out

				CSRF attack prevention

				Session Fixation protection

				Security Header integration

				HTTP Strict Transport Security for secure requests

				X-Content-Type-Options integration

				Cache Control (can be overridden later by your application to allow caching of your static resources)

				X-XSS-Protection integration

				X-Frame-Options integration to help prevent Clickjacking

				Integrate with the following Servlet API methods:

				HttpServletRequest#getRemoteUser()

				HttpServletRequest.html#getUserPrincipal()

				HttpServletRequest.html#isUserInRole(java.lang.String)

				HttpServletRequest.html#login(java.lang.String, java.lang.String)

				HttpServletRequest.html#logout()
				
In Webapplications we dont have to send user information for every request because we have the user information stored either in
		1.session token
		2.JWT	
Cookies
	Cookies are used to personalise the user experience , once the user logs in, the next time his preferance will be saved in the cookies
	When we make a first request to the server , the server will sent a response, server will send some information in the response header which the browser will 		store in its cookies and for the next request it will send the same information back to the server.
	
In browser we see JSessionId
			JSESSIONID is a cookie generated by Servlet containers and used for session management in J2EE web applications for HTTP protocol. If a Web server is using a cookie for session management, it creates and sends JSESSIONID cookie to the client and then the client sends it back to the server in subsequent HTTP requests.

SessionId + COOKies vs JWT

	Server has to generate the sessionId and store it

	SessionId is a reference token like it will be stored somewhere for reference
	
	Sessions are implemented as needed by the server
	
	Usually grants access to all information
		
JWT
	JWT are value tokens
	
	The token will be signed and it will have the user information we dont have to store any session information
	
	Username and password will not be visible or we will share our username or password with trusted entties like google so that they will give the required 	information to third party
	
	Grants access to only a subset of the data
	
	

JWT will have 3 parts

	Header.Payload.Signature

	jwt.io will help us to decode any jwt

	server generated the signature and attaches it to the jwt and sends it,Signature requires a secret key which only a server has

	Signature=base64(Header).+base64(Payload)+.secret

	JWT is not for authentcation, Jwt comes into picture after autorisation for subsiquent requests
	
	Server signs the jwt and sends it to the client in the header, 
	The client can hold it in cookie or local storage, It has to pass it in every request
	as per jwt standard,
		In the httpHeaders we pass jwt with key as Authorization: Bearer{jwt} and send it to server

JWT
		While configuring the urls for permission
		permit all should be first
		specific permission next
		anyrequest.authenticated() last

		

		https://www.youtube.com/watch?v=VVn9OG9nfH0

DrwaBacks of JWT

	1.You can logoff and end the session or session can expire but for jwt u cannot do that, you can set expire for jwt as well.
	2.SOmeone can use my jwt and access so we have to be careful when using it because jwt will validate if the token is valid and it is not tied to a user(we can 		also black list if jwt is misused)


OAuth is used for Authorisation and not for Autentication

	How OAuth works(https://www.youtube.com/watch?v=t4-416mg6iU&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=13)
	eg Imagine a photoupload app wants to access the photos from your google drive

	when a photoupload service makes a request to google drive,google drive will send the request to the user informing about the request the photoupload service is making, and it tells the user what and all the photoupload service is trying to access,

	Once the user allows the request ,google will send a token to the photoupload service and upload service will use this token for every request to google drive

	There are many ways to implement the OAuth

	1.Authorisation token and  AccessToken token

			The client makes a call to Authorisation server,
			Authorisation server makes a call the user to confirm about the request,
			Authorisation Server then sends a short lived Authorisation token to the client ,
			client uses this Authorisation token and requests for access token from the Authorisation server
			Authorisation Server will send back the Access token to the client
			Using this access token, the client makes a call to the google drive
			google drive will verify the access token either with itself or with the  authorisation server and then it provides the resource to the client


	2.Implicit flow

		 Everything will be same except here the authorisaction server will directly send the access token there is no Authorisation token(Flow 1 is more secured and flow 2 can be used to javascript related applications)

	3.Client Crediantial Flow

		Usually for micro services we use this where we trust the client

	OAuth means Open Authorisation, 
	Using OAuth we get Authorisation if we connect open Id then we will get  Authentication as well
	Earlier we were entering our gmail password inside any 3rd party applications but it was very risky so OAuth came into picture
	In OAuth u enter ur password into the oauth server and not to the application server which wants to access your data
	
	Risk of OAuth
	If you dont trust the app then giving access to your google account is not a good idea.
	If user deletes is facebook account then we have to again authenticate the user
	
	
	API Gateway Pattern-
		ZUUL-It is the open source api gateway provided by Netflix
		
	To implements api gateway we have to add gateway starter and starter eureka client
	In application.yml we have to list the services (id,url,predicates) to that for out different microservices this service will act as the gateway


When we add the spring boot security starter , spring will add a DelegatingFilterProxy filter to the web application which will intercept all the requests,
the delegating filter will delegate the request to different filters, once such filter is a Authentication Filter.

		AuthenticationProvider is responsible for the authentication, ech provider has a method called authenticate() which will return the principal user
			authenticate method will take AutenticateObject and will return thr AutenticateObject
		and supports() method which will tell the type of Authentication

			There can be a provider for pwd auth
			there can be a provider for ldap auth
			there can be a provider for Ldap auth

		AutheticationManager helps in co-ordination of multiple authenticationProviders,It too has the autenticate method,

		There are many ways in which we can implement AutenticateManager, once such way is a ProviderManager,



UserDetailService is a service provided by spring which will take a user name and return the user info


AuthenticationFilter will create a Autentication Objetc using the crediaitials and send it to AutenticationManager,
AutenticationManager will find the right provider using the support methods and will send the AutenticationObject to the provider, 
provider will use the UserDetailService to give the userDetails whihc will be used by the provider for verifying the user crediantials
if the autentication is successfull then the autenticationObjetc will also ave pricipal along with the crediantials.

Autenticate filter will get the authentication Objetc along with principal and it will store it in the local thread.

There is another filter which manages the user session, It will take the Autenticate Object and will associate with the user session and save it to local thread for evry request, dats y we do not need to autenticate every request,



https://www.youtube.com/watch?v=X80nJ5T7YpE

--------------------------------
JWT-JSON Web Token It is a value token

JWT is not used for authentication, it is furthur interaction ie to remember who the user is in the subsciquent interaction.
JWT only comes into picture only after authorization is complete

Once the authorization is complete,server sends the jwt token to the client and the client will send it back for next subscquent request by setting it in HTTP Header (which is a key value pair)
		key used will be Authorization and value will be Bearer:jwt token

Limitations or Disadvantages of JWT
	
	Someone can steal and use the JWT

	In session based token if someone steals our token we can log off the session , but in JWT we cannot end the session ,alternately we can add the JWT to the blacklist so that it becomes invalid or we can also set expire time for JWT 

It has 3 parts header,value,signature(header.value.signature)

Header and payload are base64 encoded, but the signature can only be autenticated by the server which has generated it

jwt.io we can see what is present in the token


Java 9 + version needs jaxb-api because of modularity it got removed in java9
